import pytest
from aoc.day10 import Map, ray_angle, solve


def test_ray_angle():
    assert ray_angle((0, -1)) < ray_angle((1, 0))
    assert ray_angle((1, 0)) < ray_angle((0, 1))
    assert ray_angle((0, 1)) < ray_angle((-1, -1))

    assert ray_angle((1, -1000)) < ray_angle((-1, 1000))


def test_get_rays():
    m = Map([(2, 2)])
    rays = [(0, 1), (1, 0), (1, 1), (2, 1), (1, 2)]
    origin = (0, 2)
    assert [(origin[0] + dx, origin[1] + dy) for dx, dy in m.get_rays((0, 2))] == rays


@pytest.mark.parametrize(
    "str_map, best_asteroid, num_detectables",
    [
        ([".#..#", ".....", "#####", "....#", "...##",], (3, 4), 8),
        (
            [
                "......#.#.",
                "#..#.#....",
                "..#######.",
                ".#.#.###..",
                ".#..#.....",
                "..#....#.#",
                "#..#....#.",
                ".##.#..###",
                "##...#..#.",
                ".#....####",
            ],
            (5, 8),
            33,
        ),
        (
            [
                "#.#...#.#.",
                ".###....#.",
                ".#....#...",
                "##.#.#.#.#",
                "....#.#.#.",
                ".##..###.#",
                "..#...##..",
                "..##....##",
                "......#...",
                ".####.###.",
            ],
            (1, 2),
            35,
        ),
        (
            [
                ".#..#..###",
                "####.###.#",
                "....###.#.",
                "..###.##.#",
                "##.##.#.#.",
                "....###..#",
                "..#.#..#.#",
                "#..#.#.###",
                ".##...##.#",
                ".....#.#..",
            ],
            (6, 3),
            41,
        ),
        (
            [
                ".#..##.###...#######",
                "##.############..##.",
                ".#.######.########.#",
                ".###.#######.####.#.",
                "#####.##.#.##.###.##",
                "..#####..#.#########",
                "####################",
                "#.####....###.#.#.##",
                "##.#################",
                "#####.##.###..####..",
                "..######..##.#######",
                "####.##.####...##..#",
                ".#####..#.######.###",
                "##...#.##########...",
                "#.##########.#######",
                ".####.#.###.###.#.##",
                "....##.##.###..#####",
                ".#.#.###########.###",
                "#.#.#.#####.####.###",
                "###.##.####.##.#..##",
            ],
            (11, 13),
            210,
        ),
    ],
)
def test_detectable_asteroids(str_map, best_asteroid, num_detectables):
    m = Map.from_str_map(str_map)
    assert (best_asteroid, num_detectables) == max(
        ((a, m.detectable_asteroids(a)) for a in m), key=lambda x: x[1],
    )


def test_spinning_laser():
    m = Map.from_str_map(
        [
            ".#..##.###...#######",
            "##.############..##.",
            ".#.######.########.#",
            ".###.#######.####.#.",
            "#####.##.#.##.###.##",
            "..#####..#.#########",
            "####################",
            "#.####....###.#.#.##",
            "##.#################",
            "#####.##.###..####..",
            "..######..##.#######",
            "####.##.####...##..#",
            ".#####..#.######.###",
            "##...#.##########...",
            "#.##########.#######",
            ".####.#.###.###.#.##",
            "....##.##.###..#####",
            ".#.#.###########.###",
            "#.#.#.#####.####.###",
            "###.##.####.##.#..##",
        ]
    )

    order = list(m.iter_spinning_laser_targets((11, 13)))

    assert order[0] == (11, 12)
    assert order[1] == (12, 1)
    assert order[2] == (12, 2)
    assert order[9] == (12, 8)
    assert order[19] == (16, 0)
    assert order[49] == (16, 9)
    assert order[99] == (10, 16)
    assert order[199] == (8, 2)


def test_solve():
    assert solve("data/day10.txt") == (303, 408)
